#!/bin/bash
#==================================================================================================================================
# Function: Armbian kernel update
# Copyright (C) 2021 https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021 https://github.com/ophub/amlogic-s9xxx-armbian
#
# Kernel download server: https://github.com/ophub/kernel/tree/main/pub
#
# When the kernel version is upgraded from 5.10 or lower to 5.10 or higher, need to install U-BOOT.
# When there is no U-BOOT file in related directory, the script will auto try to download the file from the server for completion:
# UBOOT_OVERLOAD: https://github.com/ophub/amlogic-s9xxx-armbian/tree/main/build-armbian/amlogic-u-boot"
# MAINLINE_UBOOT: https://github.com/ophub/amlogic-s9xxx-armbian/tree/main/build-armbian/common-files/files/usr/lib/u-boot
#
# When the kernel version is upgraded from 5.10 or lower to 5.10 or higher, Can choose to install the MAINLINE_UBOOT.
# Write mainline u-boot command: armbian-update 5.4.150 stable yes
# The mainline u-boot is not installed by default: armbian-update 5.4.150
#==================================================================================================================================

echo -e "Ready to update, please wait..."
# Encountered a serious error, abort the script execution
die() {
    echo -e " [Error] ${1}"
    exit 1
}

# Receive one-key command related parameters
# Specify the kernel, such as: 5.10.70
if [ -n "${1}" ]; then
    inputs_kernel="${1}"
elif [[ "$(ls *.tar.gz -l 2>/dev/null | grep "^-" | wc -l)" -gt "3" ]]; then
    try_boot=$(ls boot-*.tar.gz 2>/dev/null | head -n 1 | grep -oE '[1-9].[0-9]{1,3}.[0-9]+')
    [ -n "${try_boot}" ] && inputs_kernel="${try_boot}"
else
    die "Please enter the kernel version number, such as: armbian-update 5.4.160"
fi

# Specify version branch, such as: stable
arr_branch=("stable" "dev" "eol")
if [[ -n "${2}" && -n "$(echo "${arr_branch[@]}" | grep -w "${2}")" ]]; then
    version_branch="${2}"
else
    version_branch="stable"
fi

# Specify whether to brush into the mainline u-boot, such as: yes
if [[ "${3}" == "yes" ]]; then
    auto_mainline_uboot="yes"
else
    auto_mainline_uboot="no"
fi

# Set default value
kernel_repo="https://api.github.com/repos/ophub/kernel/contents/pub/${version_branch}"
depends_repo="https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/build-armbian"
ophub_release_file="/etc/ophub-release"

# Find the partition where root is located
ROOT_PTNAME=$(df / | tail -n1 | awk '{print $1}' | awk -F '/' '{print $3}')
[ -z "${ROOT_PTNAME}" ] && die "Cannot find the partition corresponding to the root file system!"

# Find the disk where the partition is located, only supports mmcblk?p? sd?? hd?? vd?? and other formats
case ${ROOT_PTNAME} in
mmcblk?p[1-4])
    EMMC_NAME="$(echo ${ROOT_PTNAME} | awk '{print substr($1, 1, length($1)-2)}')"
    ;;
[hsv]d[a-z][1-4])
    EMMC_NAME="$(echo ${ROOT_PTNAME} | awk '{print substr($1, 1, length($1)-1)}')"
    ;;
*)
    die "Unable to recognize the disk type of ${ROOT_PTNAME}!"
    ;;
esac
P4_PATH="${PWD}"

if [ -f "${ophub_release_file}" ]; then
    source "${ophub_release_file}" 2>/dev/null
    UBOOT_OVERLOAD="${UBOOT_OVERLOAD}"
    MAINLINE_UBOOT="${MAINLINE_UBOOT}"
    ANDROID_UBOOT="${ANDROID_UBOOT}"
else
    die "${ophub_release_file} file is missing!"
fi

# Check 3 kernel files
if [[ "$(ls ${P4_PATH}/*${inputs_kernel}*.tar.gz -l 2>/dev/null | grep "^-" | wc -l)" -lt "3" ]]; then
    if [[ -z "${inputs_kernel}" ]]; then
        kernel_latest_num=$(curl -s "${kernel_repo}" | grep "name" | grep -oE "5.4.[0-9]+" | sed -e "s/5.4.//g" | sort -n | sed -n '$p')
        kernel_latest_k4="5.4.${kernel_latest_num}"
        echo "Please enter the kernel version number, such as: ${kernel_latest_k4}"
        read kernel_num
        if [ -n "${kernel_num}" ]; then
            inputs_kernel="${kernel_num}"
        else
            inputs_kernel="${kernel_latest_k4}"
        fi
    fi

    echo -e "Kernel version: ${inputs_kernel}"
    echo -e "Start downloading the kernel from [ github.com/ophub/kernel/tree/main/pub/${version_branch} ] to [ ${P4_PATH} ]..."

    # Delete tmp files
    rm -f ${P4_PATH}/*${inputs_kernel}*.tar.gz 2>/dev/null
    sync

    # Download boot file
    server_kernel_boot="$(curl -s "${kernel_repo}/${inputs_kernel}" | grep "download_url" | grep -o "https.*/boot-.*.tar.gz" | head -n 1)"
    server_kernel_boot_name="${server_kernel_boot##*/}"
    server_kernel_boot_name="${server_kernel_boot_name//%2B/+}"
    wget -c "${server_kernel_boot}" -O "${P4_PATH}/${server_kernel_boot_name}" >/dev/null 2>&1 && sync
    if [[ "$?" -eq "0" && -s "${P4_PATH}/${server_kernel_boot_name}" ]]; then
        echo -e "01.01 The boot file download complete."
    else
        die "01.01 The boot file failed to download."
    fi

    # Download dtb file
    server_kernel_dtb="$(curl -s "${kernel_repo}/${inputs_kernel}" | grep "download_url" | grep -o "https.*/dtb-amlogic-.*.tar.gz" | head -n 1)"
    server_kernel_dtb_name="${server_kernel_dtb##*/}"
    server_kernel_dtb_name="${server_kernel_dtb_name//%2B/+}"
    wget -c "${server_kernel_dtb}" -O "${P4_PATH}/${server_kernel_dtb_name}" >/dev/null 2>&1 && sync
    if [[ "$?" -eq "0" && -s "${P4_PATH}/${server_kernel_dtb_name}" ]]; then
        echo -e "01.02 The dtb file download complete."
    else
        die "01.02 The dtb file failed to download."
    fi

    # Download modules file
    server_kernel_modules="$(curl -s "${kernel_repo}/${inputs_kernel}" | grep "download_url" | grep -o "https.*/modules-.*.tar.gz" | head -n 1)"
    server_kernel_modules_name="${server_kernel_modules##*/}"
    server_kernel_modules_name="${server_kernel_modules_name//%2B/+}"
    wget -c "${server_kernel_modules}" -O "${P4_PATH}/${server_kernel_modules_name}" >/dev/null 2>&1 && sync
    if [[ "$?" -eq "0" && -s "${P4_PATH}/${server_kernel_modules_name}" ]]; then
        echo -e "01.03 The modules file download complete."
    else
        die "01.03 The modules file failed to download."
    fi

    # Download header file
    server_kernel_header="$(curl -s "${kernel_repo}/${inputs_kernel}" | grep "download_url" | grep -o "https.*/header-.*.tar.gz" | head -n 1)"
    if [ -n "${server_kernel_header}" ]; then
        server_kernel_header_name="${server_kernel_header##*/}"
        server_kernel_header_name="${server_kernel_header_name//%2B/+}"
        wget -c "${server_kernel_header}" -O "${P4_PATH}/${server_kernel_header_name}" >/dev/null 2>&1 && sync
        if [[ "$?" -eq "0" && -s "${P4_PATH}/${server_kernel_header_name}" ]]; then
            echo -e "01.04 The header file download complete."
        else
            die "01.04 The header file failed to download."
        fi
    fi

    sync
fi

if [ $(ls ${P4_PATH}/*${inputs_kernel}*.tar.gz -l 2>/dev/null | grep "^-" | wc -l) -ge 3 ]; then
    if [ $(ls ${P4_PATH}/boot-${inputs_kernel}-*.tar.gz -l 2>/dev/null | grep "^-" | wc -l) -ge 1 ]; then
        build_boot=$(ls ${P4_PATH}/boot-${inputs_kernel}-*.tar.gz | head -n 1) && build_boot=${build_boot##*/}
        custom_kernel_name=${build_boot/boot-/} && custom_kernel_name=${custom_kernel_name/.tar.gz/}
        echo -e "custom_kernel_name: ${custom_kernel_name}"

        kernel_version=$(echo ${custom_kernel_name} | grep -oE '^[1-9].[0-9]{1,3}.[0-9]+')
        kernel_vermaj=$(echo ${kernel_version} | grep -oE '^[1-9].[0-9]{1,3}')
        k510_ver=${kernel_vermaj%%.*}
        k510_maj=${kernel_vermaj##*.}
        if [ ${k510_ver} -eq "5" ]; then
            if [ "${k510_maj}" -ge "10" ]; then
                K510=1
            else
                K510=0
            fi
        elif [ ${k510_ver} -gt "5" ]; then
            K510=1
        else
            K510=0
        fi
    else
        die "Have no boot-*.tar.gz file found in the ${P4_PATH} directory."
    fi

    if [ -f "${P4_PATH}/dtb-amlogic-${custom_kernel_name}.tar.gz" ]; then
        build_dtb="dtb-amlogic-${custom_kernel_name}.tar.gz"
    else
        die "Have no dtb-amlogic-*.tar.gz file found in the ${P4_PATH} directory."
    fi

    if [ -f "${P4_PATH}/modules-${custom_kernel_name}.tar.gz" ]; then
        build_modules="modules-${custom_kernel_name}.tar.gz"
    else
        die "Have no modules-*.tar.gz file found in the ${P4_PATH} directory."
    fi

    if [ -f "${P4_PATH}/header-${custom_kernel_name}.tar.gz" ]; then
        build_header="header-${custom_kernel_name}.tar.gz"
    else
        build_header=""
    fi
else
    die "Please upload the kernel files to [ ${P4_PATH} ], then run [ $0 ] again."
fi

modules_old=$(ls /lib/modules/ 2>/dev/null)
version_old=$(echo ${modules_old} | grep -oE '^[1-9].[0-9]{1,3}' 2>/dev/null)
version_ver=${version_old%%.*}
version_maj=${version_old##*.}
if [ ${version_ver} -eq "5" ]; then
    if [ "${version_maj}" -ge "10" ]; then
        V510=1
    else
        V510=0
    fi
elif [ ${version_ver} -gt "5" ]; then
    V510=1
else
    V510=0
fi

# Check version consistency
if [ "${V510}" -lt "${K510}" ]; then
    echo -e "Update to kernel 5.10 or higher and install U-BOOT."

    # Check ${UBOOT_OVERLOAD}
    if [[ -n "${UBOOT_OVERLOAD}" ]]; then
        if [[ ! -s "/boot/${UBOOT_OVERLOAD}" ]]; then
            echo -e "Try to download the ${UBOOT_OVERLOAD} file from the server."
            GITHUB_UBOOT_OVERLOAD="${depends_repo}/amlogic-u-boot/${UBOOT_OVERLOAD}"
            #echo -e "UBOOT_OVERLOAD: ${GITHUB_UBOOT_OVERLOAD}"
            wget -c "${GITHUB_UBOOT_OVERLOAD}" -O "/boot/${UBOOT_OVERLOAD}" >/dev/null 2>&1 && sync
            if [[ "$?" -eq "0" && -s "/boot/${UBOOT_OVERLOAD}" ]]; then
                echo -e "The ${UBOOT_OVERLOAD} file download is complete."
            else
                die "The ${UBOOT_OVERLOAD} file download failed. please try again."
            fi
        else
            echo -e "The ${UBOOT_OVERLOAD} file has been found."
        fi
    else
        die "The 5.10 kernel cannot be used without UBOOT_OVERLOAD."
    fi

    # Check ${MAINLINE_UBOOT}
    if [[ -n "${MAINLINE_UBOOT}" && "${auto_mainline_uboot}" == "yes" ]]; then
        if [[ ! -s "${MAINLINE_UBOOT}" ]]; then
            echo -e "Try to download the MAINLINE_UBOOT file from the server."
            GITHUB_MAINLINE_UBOOT="${depends_repo}/common-files/files/usr${MAINLINE_UBOOT}"
            #echo -e "MAINLINE_UBOOT: ${GITHUB_MAINLINE_UBOOT}"
            [ -d "/lib/u-boot" ] || mkdir -p /lib/u-boot
            wget -c "${GITHUB_MAINLINE_UBOOT}" -O "${MAINLINE_UBOOT}" >/dev/null 2>&1 && sync
            if [[ "$?" -eq "0" && -s "${MAINLINE_UBOOT}" ]]; then
                echo -e "The MAINLINE_UBOOT file download is complete."
            else
                die "The MAINLINE_UBOOT file download failed. please try again."
            fi
        fi
    fi

    # Copy u-boot.ext and u-boot.emmc
    if [ "${K510}" -eq "1" ]; then
        if [ -f "/boot/${UBOOT_OVERLOAD}" ]; then
            [ ! -f "/boot/u-boot.ext" ] && cp -f "/boot/${UBOOT_OVERLOAD}" /boot/u-boot.ext && sync && chmod +x /boot/u-boot.ext
            [ ! -f "/boot/u-boot.emmc" ] && cp -f "/boot/u-boot.ext" /boot/u-boot.emmc && sync && chmod +x /boot/u-boot.emmc
            echo -e "The ${UBOOT_OVERLOAD} file copy is complete."
        else
            die "The UBOOT_OVERLOAD file is missing and cannot be update."
        fi
    fi

    # Write bootloader
    if [[ -n "${MAINLINE_UBOOT}" && -f ${MAINLINE_UBOOT} && "${auto_mainline_uboot}" == "yes" ]]; then
        echo -e "Write Mainline bootloader: [ ${MAINLINE_UBOOT} ]"
        dd if=${MAINLINE_UBOOT} of=${DEV_EMMC} bs=1 count=444 conv=fsync
        dd if=${MAINLINE_UBOOT} of=${DEV_EMMC} bs=512 skip=1 seek=1 conv=fsync
    elif [[ -n "${ANDROID_UBOOT}" && -f "${ANDROID_UBOOT}" ]]; then
        echo -e "Write Android bootloader: [ ${ANDROID_UBOOT} ]"
        dd if=${ANDROID_UBOOT} of=${DEV_EMMC} bs=1 count=444 conv=fsync
        dd if=${ANDROID_UBOOT} of=${DEV_EMMC} bs=512 skip=1 seek=1 conv=fsync
    fi

fi

# Remove u-boot.ext files in kernels below 5.10
if [ "${K510}" -eq "0" ]; then
    rm -f /boot/u-boot.ext 2>/dev/null && sync
    rm -f /boot/u-boot.emmc 2>/dev/null && sync
fi

echo -e "Unpack [ ${custom_kernel_name} ] related files ..."

# 01. for /boot five files
rm -f /boot/config-* /boot/initrd.img-* /boot/System.map-* /boot/uInitrd-* /boot/vmlinuz-* 2>/dev/null && sync
rm -f /boot/uInitrd /boot/zImage 2>/dev/null && sync
tar -xzf ${P4_PATH}/${build_boot} -C /boot && sync

if [[ -f "/boot/uInitrd-${custom_kernel_name}" ]]; then
    i=1
    max_try=10
    while [ "${i}" -le "${max_try}" ]; do
        cp -f /boot/uInitrd-${custom_kernel_name} /boot/uInitrd 2>/dev/null && sync
        uInitrd_original=$(md5sum /boot/uInitrd-${custom_kernel_name} | awk '{print $1}')
        uInitrd_new=$(md5sum /boot/uInitrd | awk '{print $1}')
        if [[ "${uInitrd_original}" == "${uInitrd_new}" ]]; then
            break
        else
            rm -f /boot/uInitrd && sync
            let i++
            continue
        fi
    done
    [ "${i}" -eq "10" ] && die "/boot/uInitrd-${custom_kernel_name} file copy failed."
else
    die "/boot/uInitrd-${custom_kernel_name} file is missing."
fi

if [[ -f "/boot/vmlinuz-${custom_kernel_name}" ]]; then
    i=1
    max_try=10
    while [ "${i}" -le "${max_try}" ]; do
        cp -f /boot/vmlinuz-${custom_kernel_name} /boot/zImage 2>/dev/null && sync
        vmlinuz_original=$(md5sum /boot/vmlinuz-${custom_kernel_name} | awk '{print $1}')
        vmlinuz_new=$(md5sum /boot/zImage | awk '{print $1}')
        if [[ "${vmlinuz_original}" == "${vmlinuz_new}" ]]; then
            break
        else
            rm -f /boot/zImage && sync
            let i++
            continue
        fi
    done
    [ "${i}" -eq "10" ] && die "/boot/vmlinuz-${custom_kernel_name} file copy failed."
else
    die "/boot/vmlinuz-${custom_kernel_name} file is missing."
fi

[ -f "/boot/config-${custom_kernel_name}" ] || die "/boot/config-${custom_kernel_name} file is missing."
[ -f "/boot/System.map-${custom_kernel_name}" ] || die "/boot/System.map-${custom_kernel_name} file is missing."

echo -e "02.01 Unpack [ ${build_boot} ] complete."
sleep 3

# 02. for /boot/dtb/amlogic/*
tar -xzf ${P4_PATH}/${build_dtb} -C /boot/dtb/amlogic && sync
[ "$(ls /boot/dtb/amlogic -l 2>/dev/null | grep "^-" | wc -l)" -ge "10" ] || die "/boot/dtb/amlogic file is missing."
echo -e "02.02 Unpack [ ${build_dtb} ] complete."
sleep 3

# 03. for /lib/modules/*
rm -rf /usr/lib/modules/* 2>/dev/null && sync
tar -xzf ${P4_PATH}/${build_modules} -C /usr/lib/modules && sync
(cd /usr/lib/modules/${custom_kernel_name} && echo "build source" | xargs rm -f)
[[ -d "/usr/lib/modules/${custom_kernel_name}" ]] || die "/usr/lib/modules/${custom_kernel_name} kernel folder is missing."
echo -e "02.03 Unpack [ ${build_modules} ] complete."
sleep 3

# 04. for /usr/local/include/*
if [[ -n "${build_header}" && -f "${P4_PATH}/${build_header}" ]]; then
    rm -rf /usr/local/include/* 2>/dev/null && sync
    tar -xzf ${P4_PATH}/${build_header} -C /usr/local && sync
    echo -e "02.04 Unpack [ ${build_header} ] complete."
    sleep 3
fi

# 05. Delete kernel files
rm -f ${P4_PATH}/*${custom_kernel_name}*.tar.gz 2>/dev/null

# 06. Update
sed -i '/KERNEL_VERSION/d' ${ophub_release_file} 2>/dev/null
echo "KERNEL_VERSION='${kernel_version}'" >>${ophub_release_file} 2>/dev/null
sed -i '/K510/d' ${ophub_release_file} 2>/dev/null
echo "K510='${K510}'" >>${ophub_release_file} 2>/dev/null

sync
wait

echo "Successfully updated, automatic restarting..."
sleep 3
reboot
exit 0
